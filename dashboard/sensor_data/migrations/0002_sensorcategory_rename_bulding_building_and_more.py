# Generated by Django 5.2.4 on 2025-07-18 03:46

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('sensor_data', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SensorCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('sensor_type', models.CharField(choices=[('ENVIRONMENT', 'Environmental Sensor'), ('METER', 'Consumption Meter'), ('EQUIPMENT', 'Climate Equipment / PLC')], max_length=50)),
            ],
        ),
        migrations.RenameModel(
            old_name='Bulding',
            new_name='Building',
        ),
        migrations.RenameField(
            model_name='sensor',
            old_name='manufactuer',
            new_name='manufacturer',
        ),
        migrations.RemoveField(
            model_name='sensor',
            name='sensor_type',
        ),
        migrations.AddField(
            model_name='sensor',
            name='building',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sensor_data.building'),
        ),
        migrations.AddField(
            model_name='sensor',
            name='serial_number',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.CreateModel(
            name='DataField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('field_type', models.CharField(choices=[('FLOAT', 'Float'), ('INT', 'Integer'), ('STR', 'String'), ('BOOL', 'Boolean')], max_length=10)),
                ('unit', models.CharField(blank=True, max_length=20)),
                ('description', models.TextField(blank=True)),
                ('sensor_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_fields', to='sensor_data.sensorcategory')),
            ],
        ),
        migrations.AddField(
            model_name='sensor',
            name='sensor_category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sensor_data.sensorcategory'),
        ),
        migrations.CreateModel(
            name='SensorReading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='readings', to='sensor_data.sensor')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('float_value', models.FloatField(blank=True, null=True)),
                ('int_value', models.IntegerField(blank=True, null=True)),
                ('str_value', models.CharField(blank=True, max_length=255, null=True)),
                ('bool_value', models.BooleanField(blank=True, null=True)),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sensor_data.datafield')),
                ('reading', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='measurements', to='sensor_data.sensorreading')),
            ],
            options={
                'verbose_name': 'Sensor Measurement',
                'verbose_name_plural': 'Sensor Measurements',
            },
        ),
        migrations.AddIndex(
            model_name='sensorreading',
            index=models.Index(fields=['sensor', 'timestamp'], name='sensor_data_sensor__4e9baa_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='measurement',
            unique_together={('reading', 'field')},
        ),
    ]
